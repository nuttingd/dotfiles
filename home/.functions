#!/usr/bin/env bash

if [[ ! -z "$functions_loaded" ]]; then
  verbose_log ".functions is already loaded. To force, unset functions_loaded"
  return 0
fi

function os_type {
  case "$OSTYPE" in
    solaris*) echo "solaris" ;;
    darwin*)  echo "osx" ;;
    linux*)   echo "linux" ;;
    bsd*)     echo "bsd" ;;
    msys*)    echo "windows" ;;
    *)        echo "unknown" ;;
  esac
}

shell () {
  # Echoes the CURRENT shell (i.e. 'zsh' or 'bash')
  # This is mainly a helper for interactive shell startup scripts, where the shell
  # is needed as an argument to register completions or other shell magic.
  # The SHELL variable designates the "preferred" shell, and will still be 'zsh' 
  # if you run 'bash' in a 'zsh' shell, hence the need for this function.
  # remove leading hyphens (login shell flag) and basename /bin/zsh to zsh if nec
  basename $(ps -p $$ | tail -1 | awk '{print $4}' | sed -e 's/^-//g')
}

wip-it-good() {
  if git status &> /dev/null; then
    git add -A
    git commit --no-verify --no-gpg-sign -am "wip"
  else
    echo Not a git repository...
    return 1
  fi
}

prompt_continue() {
  local prompt
  local default=n
  while [[ "$#" > 0 ]]; do 
    case $1 in
      -y|--yes) default=y;shift;;
      -s|--silent) local silent=1;shift;;
      --) shift; prompt="$prompt$@ "; break;;
      *) prompt="$prompt$1 "; shift;;
    esac 
  done

  printf "${prompt}[${default}]"
  read user_input
  local action=$default

  case $user_input in
    y|yes|Y|Yes|YES) action=y;;
    n|no|N|No|NO) action=n;;
  esac
  
  if [[ "n" == "$action" ]]; then
    [[ -z "$silent" ]] && echo "Aborted."
    return 1
  fi
  return 0
}

function has_os {
  if [[ "$(os_type)" == "$1" ]]; then
    return 0;
  fi
  return 1;
}

function has_command {
  if command -v $1 > /dev/null 2>&1; then
	  return 0;
  else
	  return 1;
  fi
}

# switch iTerm2 profile from the command line
function it2prof {
  echo -e "\033]50;SetProfile=$1\a"
}

function verbose_log {
    [[ $VERBOSE -eq 1 ]] && echo $@
}

function echoerr {
    printf "%s\n" "$*" >&2;
}

function error_log {
    echoerr "ERROR: $@"
}

# 1password-cli
function op_signin {
  if ! exists_env 'OP_SESSION_my'; then
    verbose_log "OP_SESSION_my var does not exist. Signing into 1Password."
    if eval $(op signin my); then
      return 0;
    fi
    verbose_log "There was an error signing into 1Password."
    return 1;
  else
    verbose_log "OP_SESSION_my var exists. Not signing into 1Password."
    return 0;
  fi
}

# notification bubble
function notify {
  message=$@
  osascript -e "display notification \"${message}\" with title \"ðŸ“Ÿ\""
}

# utc to local
function u2l {
    local utc=$1
    [[ -z "$utc" ]] && { printf "Enter UTC date string: "; read utc; }
    node -e "console.log(new Date(\"$utc\").toLocaleString())"
}

# local to utc
function l2u {
    local loc=$1
    [[ -z "$loc" ]] && { printf "Enter Local date string: "; read loc; }
    node -e "console.log(new Date(\"$loc\").toLocaleString())"
}

# encode base64
function btoa {
    local raw=$1
    [[ -z "$raw" ]] && { printf "Enter raw string: "; read raw; }
    echo "$raw" | base64
}

# decode base64
function atob {
    local encoded=$1
    [[ -z "$encoded" ]] && { printf "Enter encoded string: "; read encoded; }
    echo "$encoded" | base64 --decode
}

# ------------------------------------
# https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html
function exists {
  if [[ -e "$1" ]]; then
    return 0;
  fi
  return 1;
}

function exists_file {
  if [[ -f "$1" ]]; then
    return 0;
  fi
  return 1;
}

function exists_dir {
  if [[ -d "$1" ]]; then
    return 0;
  fi
  return 1;
}

function exists_symlink {
  if [[ -h "$1" ]]; then
    return 0;
  fi
  return 1;
}

function exists_env {
  local env_var_name="$1"
  verbose_log "env_var_name: $env_var_name"
  if eval "[[ -z  \"\$${env_var_name}\" ]]"; then
    return 1;
  fi
  return 0;
}

function add_path {
  export PATH=$1:$PATH
}

functions_loaded=$$
